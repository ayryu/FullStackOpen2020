{"version":3,"sources":["components/person.js","components/phonebook.js","services/numbers.js","components/notification.js","app.js","index.js"],"names":["Person","content","deletion","name","number","onClick","PhoneBook","props","onSubmit","submitFunction","value","onChange","nameChange","numberChange","type","baseUrl","axios","get","then","response","data","newObject","post","id","put","request","delete","console","log","Notification","message","className","App","useState","people","setPeople","newPerson","setNewPerson","searchedName","setSearchedName","notifMessage","setNotifMessage","useEffect","numbersService","storedPhoneNumbers","fillNewPersonInfo","param","event","target","SearchForPerson","searchResults","filter","listing","includes","undefined","length","map","key","DisplayNotifications","preventDefault","result","person","resetValue","updatedEntry","window","confirm","returnedPersonInfo","concat","catch","error","alert","personObject","singleReturnedPerson","returnedPersonObject","allNotifications","Object","keys","errors","targetPerson","find","p","deletePersonInfo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cb8ec0b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ content, deletion }) => {\r\n\r\n    function handleClick() {\r\n        deletion();\r\n    }\r\n\r\n    return (\r\n    <p>\r\n        {content.name} {content.number} <button onClick={handleClick}>Delete Listing</button> \r\n    </p>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst PhoneBook= (props) => {\r\n    return (\r\n        <form onSubmit={props.submitFunction}>\r\n        <div>\r\n          name: <input\r\n          value={props.name} \r\n          onChange={props.nameChange}/>\r\n          <br></br>\r\n          phone number: <input \r\n          value={props.number} \r\n          onChange={props.numberChange}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PhoneBook","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n  const getAll = () => {\r\n      const request = axios.get(baseUrl)\r\n      return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    // console.log('What is returned from create', request.then(response => response.data))\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n    const deleteListing = (id, newObject) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`, newObject)\r\n    console.log('What is returned from deleteListing', request.then(response => response.data))\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  export default { \r\n    getAll, \r\n    create, \r\n    update,\r\n    deleteListing \r\n  }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (!message) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className=\"notification\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Person from './components/person'\r\nimport PhoneBook from './components/phonebook'\r\nimport numbersService from './services/numbers'\r\nimport Notification from './components/notification'\r\n\r\nconst App = () => {\r\n  const [people, setPeople] = useState([]) //state of info of existing people\r\n  const [newPerson, setNewPerson] = useState({ //state of value in input element\r\n    name: '',\r\n    number: '',\r\n  })\r\n  const [searchedName, setSearchedName] = useState('')\r\n  const [notifMessage, setNotifMessage] = useState([])\r\n\r\n  const hook = () => {\r\n    numbersService\r\n      .getAll()\r\n      .then(storedPhoneNumbers => {\r\n        setPeople(storedPhoneNumbers)\r\n      })\r\n  }\r\n\r\n  useEffect(hook, [])\r\n\r\n  // used for adding new entries or updating existing entries\r\n  const addPersonInfo = (event) => {\r\n    event.preventDefault()\r\n\r\n    const result = people.filter(person => person.name === newPerson.name)\r\n    const resetValue = {\r\n      name: '',\r\n      number: '',\r\n    }\r\n    console.log('Result: ', result)\r\n\r\n    if (result.length === 1) { //if new Person already exists in People array, update the existing \r\n      const updatedEntry = {\r\n        name: result[0].name,\r\n        number: newPerson.number,\r\n        id: result[0].id,\r\n      }\r\n\r\n      if (window.confirm(`${newPerson.name} has already been added to the phonebook, would you like to replace their existing number?`)) {\r\n        numbersService\r\n          .update(updatedEntry.id, updatedEntry)\r\n          .then(returnedPersonInfo => {\r\n            setPeople(people.map(person => person.id !== returnedPersonInfo.id ? person : returnedPersonInfo))\r\n            setNotifMessage(notifMessage.concat\r\n              (`${returnedPersonInfo.name}'s information has been updated!`))\r\n            setNewPerson(resetValue)\r\n            console.log('Value of returnedPersonInfo: ', returnedPersonInfo)\r\n          })\r\n          .catch(error => {\r\n            alert(\r\n              `${updatedEntry.name} has already been removed from the server`\r\n            )\r\n            setPeople(people.filter(person => person.id !== result[0].id))\r\n            setNewPerson(resetValue)\r\n          })\r\n      }\r\n    } if (result.length === 0) {\r\n      event.preventDefault()\r\n\r\n      const personObject = {\r\n        name: newPerson.name,\r\n        number: newPerson.number,\r\n      }\r\n\r\n      numbersService\r\n        .create(personObject)       //send POST request with newPerson \r\n        .then(singleReturnedPerson => {\r\n          const returnedPersonObject = {\r\n            name: singleReturnedPerson.name,\r\n            number: singleReturnedPerson.number\r\n          }\r\n          setPeople(people.concat(returnedPersonObject))   //update People array with newPerson\r\n          setNewPerson(resetValue)    //empty the input element \r\n          setNotifMessage(notifMessage.concat\r\n            (`${singleReturnedPerson.name}'s information has been added to the phonebook!`))\r\n        })\r\n        .catch(error => {\r\n          const allNotifications = Object.keys(error.response.data.errors).map(key => error.response.data.errors[key].message)\r\n          console.log('Keys in errors object', Object.keys(error.response.data.errors))\r\n          console.log(\"Array of Notifications: \", allNotifications)\r\n          console.log(\"Pure Error: \", error.response.data)\r\n          setNotifMessage(notifMessage.concat(allNotifications))\r\n        })\r\n\r\n    }\r\n  }\r\n\r\n  const deletePersonInfo = id => {\r\n    const targetPerson = people.find(p => p.id === id)  //Go through array, find person that matches the argument id\r\n\r\n    if (window.confirm(`Are you sure you want to delete ${targetPerson.name} from the phonebook?`)) {\r\n      numbersService\r\n        .deleteListing(id, targetPerson)\r\n        .then(() => {\r\n          setPeople(people.filter(person => person.id !== targetPerson.id)) //updated list here\r\n        })\r\n        .catch(error => {\r\n          setNotifMessage(notifMessage.concat\r\n            (`The listing of ${targetPerson.name} has already been deleted from the server`))\r\n          setPeople(people.filter(person => person.id !== targetPerson.id))\r\n        })\r\n    }\r\n  }\r\n\r\n  const fillNewPersonInfo = param => {      //To render the updated values\r\n    return (event) => {\r\n      setNewPerson({ ...newPerson, [param]: event.target.value })\r\n    }\r\n  }\r\n\r\n  const SearchForPerson = () => {\r\n    const searchFilter = listing => {\r\n      listing.name.includes(searchedName);\r\n    }\r\n    const searchMapping = listing => <Person key={listing.name} content={listing} />;\r\n    const searchResults = people.filter(searchFilter);\r\n\r\n    if (searchedName === undefined || searchedName === '') {\r\n      return false;\r\n    }\r\n    console.log('These are the search results: ', searchResults);\r\n    if (searchResults.length === 0) {\r\n      return <p>No matching names were found!</p>;\r\n    }\r\n    console.log('People: ', people)\r\n    return searchResults.map(searchMapping);\r\n  }\r\n\r\n  const DisplayNotifications = () => {\r\n    const showNotifications = notifMessage ?\r\n      notifMessage.map(message => <Notification message={message} />) : null;\r\n    return showNotifications;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <Notification message={notifMessage} /> */}\r\n      <ul>\r\n        {\r\n          <DisplayNotifications />\r\n        }\r\n      </ul>\r\n      <h2>Search</h2>\r\n      <div>\r\n        <form>\r\n          field: <input\r\n            value={searchedName}\r\n            onChange={event => setSearchedName(event.target.value)}\r\n          />\r\n        </form>\r\n\r\n        <h3>Matching Results:</h3>\r\n\r\n        <ul>\r\n          <SearchForPerson />\r\n        </ul>\r\n      </div>\r\n\r\n      <h2>Phonebook</h2>\r\n\r\n      <PhoneBook name={newPerson.name} number={newPerson.number}\r\n        nameChange={fillNewPersonInfo('name')} numberChange={fillNewPersonInfo('number')}\r\n        submitFunction={addPersonInfo} />\r\n\r\n      <h2>Numbers</h2>\r\n      <ul>\r\n        {people.map(person =>\r\n          <Person\r\n            key={person.id}\r\n            content={person}\r\n            deletion={() => deletePersonInfo(person.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app'\r\nimport './index.css'\r\n\r\n//hi\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}